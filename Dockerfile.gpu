# syntax=docker/dockerfile:1.7
FROM swaggerapi/swagger-ui:v5.9.1 AS swagger-ui

FROM nvidia/cuda:12.6.3-base-ubuntu22.04

ARG PYTHON_VERSION=3.10
ARG POETRY_VERSION=2.1.3
ENV DEBIAN_FRONTEND=noninteractive \
    POETRY_VENV=/app/.venv \
    PATH="/app/.venv/bin:${PATH}"

# OS deps (with apt cache)
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt/lists \
    apt-get -qq update && apt-get -qq install --no-install-recommends \
      python${PYTHON_VERSION} python${PYTHON_VERSION}-venv python3-pip ffmpeg libcudnn8 \
    && rm -rf /var/lib/apt/lists/*

RUN ln -sf /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    ln -sf /usr/bin/python${PYTHON_VERSION} /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# IMPORTANT: create /app *before* making the venv there
WORKDIR /app

# Create venv and install Poetry into it
RUN python3 -m venv "$POETRY_VENV" && \
    "$POETRY_VENV/bin/pip" install -U pip setuptools && \
    "$POETRY_VENV/bin/pip" install "poetry==${POETRY_VERSION}"

# Copy only dependency manifests first (cacheable)
COPY pyproject.toml poetry.lock ./

# Configure poetry + install deps using cache mounts
RUN "$POETRY_VENV/bin/poetry" config virtualenvs.in-project true
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/pypoetry \
    "$POETRY_VENV/bin/poetry" install --no-root --without dev --extras cuda

# Now copy the rest of your project files
COPY . .

# If you need to install your package itself (no downloads; uses already-installed deps)
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/pypoetry \
    "$POETRY_VENV/bin/poetry" install --only-root --no-interaction --no-ansi

# Swagger assets (tiny, late copy)
COPY --from=swagger-ui /usr/share/nginx/html/swagger-ui.css swagger-ui-assets/swagger-ui.css
COPY --from=swagger-ui /usr/share/nginx/html/swagger-ui-bundle.js swagger-ui-assets/swagger-ui-bundle.js

EXPOSE 9000
ENTRYPOINT ["whisper-asr-webservice"]
